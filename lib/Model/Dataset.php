<?php
/**
 * Dataset
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * opendatasoft
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Dataset Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Dataset implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'dataset';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'dataset_id' => 'string',
        'attachments' => 'object[]',
        'has_records' => 'bool',
        'data_visible' => 'bool',
        'features' => 'string[]',
        'metas' => 'object',
        'fields' => '\Swagger\Client\Model\DatasetFields[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'dataset_id' => null,
        'attachments' => null,
        'has_records' => null,
        'data_visible' => null,
        'features' => null,
        'metas' => null,
        'fields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dataset_id' => 'dataset_id',
        'attachments' => 'attachments',
        'has_records' => 'has_records',
        'data_visible' => 'data_visible',
        'features' => 'features',
        'metas' => 'metas',
        'fields' => 'fields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dataset_id' => 'setDatasetId',
        'attachments' => 'setAttachments',
        'has_records' => 'setHasRecords',
        'data_visible' => 'setDataVisible',
        'features' => 'setFeatures',
        'metas' => 'setMetas',
        'fields' => 'setFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dataset_id' => 'getDatasetId',
        'attachments' => 'getAttachments',
        'has_records' => 'getHasRecords',
        'data_visible' => 'getDataVisible',
        'features' => 'getFeatures',
        'metas' => 'getMetas',
        'fields' => 'getFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dataset_id'] = isset($data['dataset_id']) ? $data['dataset_id'] : null;
        $this->container['attachments'] = isset($data['attachments']) ? $data['attachments'] : null;
        $this->container['has_records'] = isset($data['has_records']) ? $data['has_records'] : null;
        $this->container['data_visible'] = isset($data['data_visible']) ? $data['data_visible'] : null;
        $this->container['features'] = isset($data['features']) ? $data['features'] : null;
        $this->container['metas'] = isset($data['metas']) ? $data['metas'] : null;
        $this->container['fields'] = isset($data['fields']) ? $data['fields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dataset_id
     *
     * @return string
     */
    public function getDatasetId()
    {
        return $this->container['dataset_id'];
    }

    /**
     * Sets dataset_id
     *
     * @param string $dataset_id dataset_id
     *
     * @return $this
     */
    public function setDatasetId($dataset_id)
    {
        $this->container['dataset_id'] = $dataset_id;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return object[]
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param object[] $attachments attachments
     *
     * @return $this
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets has_records
     *
     * @return bool
     */
    public function getHasRecords()
    {
        return $this->container['has_records'];
    }

    /**
     * Sets has_records
     *
     * @param bool $has_records has_records
     *
     * @return $this
     */
    public function setHasRecords($has_records)
    {
        $this->container['has_records'] = $has_records;

        return $this;
    }

    /**
     * Gets data_visible
     *
     * @return bool
     */
    public function getDataVisible()
    {
        return $this->container['data_visible'];
    }

    /**
     * Sets data_visible
     *
     * @param bool $data_visible data_visible
     *
     * @return $this
     */
    public function setDataVisible($data_visible)
    {
        $this->container['data_visible'] = $data_visible;

        return $this;
    }

    /**
     * Gets features
     *
     * @return string[]
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param string[] $features A map of available features for a dataset, with the fields they apply to.
     *
     * @return $this
     */
    public function setFeatures($features)
    {
        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets metas
     *
     * @return object
     */
    public function getMetas()
    {
        return $this->container['metas'];
    }

    /**
     * Sets metas
     *
     * @param object $metas metas
     *
     * @return $this
     */
    public function setMetas($metas)
    {
        $this->container['metas'] = $metas;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return \Swagger\Client\Model\DatasetFields[]
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param \Swagger\Client\Model\DatasetFields[] $fields fields
     *
     * @return $this
     */
    public function setFields($fields)
    {
        $this->container['fields'] = $fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


